{"version":3,"sources":["App.js","index.js"],"names":["accessKey","process","App","useState","images","setImages","page","setPage","query","setQuery","getImages","apiUrl","fetch","then","res","json","data","imagesFromApi","results","useEffect","className","onSubmit","e","preventDefault","type","placeholder","value","onChange","target","dataLength","length","next","hasMore","loader","map","image","key","id","href","links","html","rel","src","urls","regular","alt","alt_description","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wLAIMA,G,MAAYC,+CAEH,SAASC,IAAO,IAAD,EACAC,mBAAS,IADT,mBACrBC,EADqB,KACbC,EADa,OAEJF,mBAAS,GAFL,mBAErBG,EAFqB,KAEfC,EAFe,OAGFJ,mBAAS,IAHP,mBAGrBK,EAHqB,KAGdC,EAHc,KAU5B,SAASC,IACP,IAAIC,EAAS,oCACTH,IAAOG,EAAM,uDAAmDH,IACpEG,GAAM,gBAAaL,GACnBK,GAAM,qBAAkBX,GAExBY,MAAMD,GACLE,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GAAU,IAAD,EACRC,EAAa,UAAGD,EAAKE,eAAR,QAAmBF,EAOtCX,EALa,IAATC,EAKM,SAACF,GAAD,4BAAgBA,GAAhB,YAA2Ba,KAJzBA,MAoBhB,OArCAE,qBAAU,WACRT,MAEC,CAACJ,IAmCF,yBAAKc,UAAU,OACb,uDAEA,0BAAMC,SAhBV,SAAsBC,GACpBA,EAAEC,iBACFhB,EAAQ,GACRG,MAcI,2BAAOc,KAAK,OAAOC,YAAY,qBAAqBC,MAAOlB,EAAOmB,SAAU,SAACL,GAAD,OAAOb,EAASa,EAAEM,OAAOF,UACrG,2CAGF,kBAAC,IAAD,CAAgBG,WAAYzB,EAAO0B,OAAQC,KAAM,kBAAMxB,GAAQ,SAACD,GAAD,OAAUA,EAAO,MAC9E0B,SAAS,EAAMC,OAAQ,2CACrB,yBAAKb,UAAU,cACZhB,EAAO8B,KAAI,SAACC,GAAD,OACV,uBAAGf,UAAU,QAAQgB,IAAKD,EAAME,GAAIC,KAAMH,EAAMI,MAAMC,KAAMZ,OAAO,SAASa,IAAI,uBAC9E,yBAAKC,IAAKP,EAAMQ,KAAKC,QAASC,IAAKV,EAAMW,yBC1DzDC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.c93b6783.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport './App.css';\n\nconst accessKey = process.env.REACT_APP_UNSPLASH_ACCESS_KEY;\n\nexport default function App() {\n  const [images, setImages] = useState([]);\n  const [page, setPage] = useState(1);\n  const [query, setQuery] = useState('');\n\n  useEffect(() => {\n    getImages();\n    //eslint-disable-next-line\n  }, [page]);\n\n  function getImages() {\n    let apiUrl = 'https://api.unsplash.com/photos/?';\n    if (query) apiUrl = `https://api.unsplash.com/search/photos?query=${query}`;\n    apiUrl += `&page=${page}`;\n    apiUrl += `&client_id=${accessKey}`;\n\n    fetch(apiUrl)\n    .then((res) => res.json())\n    .then((data) => {\n      const imagesFromApi = data.results ?? data;\n\n      if (page === 1) {\n        setImages(imagesFromApi);\n        return;\n      }\n\n      setImages((images) => [...images, ...imagesFromApi]);\n    })\n  }\n\n  function searchImages(e) {\n    e.preventDefault();\n    setPage(1);\n    getImages();\n  }\n\n  if (!accessKey) {\n    return(\n      <a href='https://unsplash.com/documentation' className='error'>Required: Get Your Unsplash API Key First</a>\n    )\n  }\n\n  return (\n    <div className=\"app\">\n      <h1>Unsplash Image Gallery!</h1>\n\n      <form onSubmit={searchImages}>\n        <input type=\"text\" placeholder=\"Search Unsplash...\" value={query} onChange={(e) => setQuery(e.target.value)}/>\n        <button>Search</button>\n      </form>\n\n      <InfiniteScroll dataLength={images.length} next={() => setPage((page) => page + 1)}\n        hasMore={true} loader={<h4>Loading...</h4>}>\n          <div className=\"image-grid\">\n            {images.map((image) => (\n              <a className=\"image\" key={image.id} href={image.links.html} target='_blank' rel='noopener noreferrer'>\n                <img src={image.urls.regular} alt={image.alt_description} />\n              </a>\n            ))}\n          </div>\n      </InfiniteScroll>\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}